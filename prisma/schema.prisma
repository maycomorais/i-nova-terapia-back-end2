generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                    @id @default(autoincrement())
  email                String                 @unique
  name                 String
  password             String
  role                 Role
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  master               Master?
  clinic               Clinic?
  psychologist         Psychologist?
  patient              Patient?
  Holiday              Holiday[]
  notificationSettings NotificationSettings?
  phone                String?
  tenantId             String
}

model NotificationSettings {
  id                  Int     @id @default(autoincrement())
  user                User    @relation(fields: [userId], references: [id])
  userId              Int     @unique
  emailNotifications  Boolean @default(true)
  smsNotifications    Boolean @default(false)
  pushNotifications   Boolean @default(false)
  reminderTimeMinutes Int     @default(1440) // 24 hours in minutes
}

model Master {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
  tenantId    String
  
}

model Clinic {
  id            Int            @id @default(autoincrement())
  user          User           @relation(fields: [userId], references: [id])
  userId        Int            @unique
  name          String
  cnpj          String?
  address       String
  phone         String
  tenantId      String
  psychologists Psychologist[]
  patients      Patient[]
}

model Psychologist {
  id            Int             @id @default(autoincrement())
  user          User            @relation(fields: [userId], references: [id])
  userId        Int             @unique
  cpf           String          @unique
  crp           String          @unique
  address       String
  phone         String
  clinic        Clinic?         @relation(fields: [clinicId], references: [id])
  clinicId      Int?
  tenantId      String
  patients      Patient[]
  appointments  Appointment[]
  AvailableSlot AvailableSlot[]
}

model Patient {
  id             Int           @id @default(autoincrement())
  user           User          @relation(fields: [userId], references: [id])
  userId         Int           @unique
  cpf            String        @unique
  address        String
  phone          String
  psychologist   Psychologist? @relation(fields: [psychologistId], references: [id])
  psychologistId Int?
  clinic         Clinic?       @relation(fields: [clinicId], references: [id])
  clinicId       Int?
  tenantId       String
  appointments   Appointment[]
  moodDiaries    MoodDiary[]
}

model Appointment {
  id             Int               @id @default(autoincrement())
  patient        Patient           @relation(fields: [patientId], references: [id])
  patientId      Int
  psychologist   Psychologist      @relation(fields: [psychologistId], references: [id])
  psychologistId Int
  dateTime       DateTime
  duration       Int
  status         AppointmentStatus
  notes          String?
  tenantId       String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
}

model Holiday {
  id          Int      @id @default(autoincrement())
  date        DateTime
  description String
  isNational  Boolean
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById Int
}

model AvailableSlot {
  id             Int          @id @default(autoincrement())
  psychologist   Psychologist @relation(fields: [psychologistId], references: [id])
  psychologistId Int
  startTime      DateTime
  endTime        DateTime
  isAvailable    Boolean
}

model MoodDiary {
  id        Int      @id @default(autoincrement())
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int
  date      DateTime
  mood      Int
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  MASTER
  CLINIC
  PSYCHOLOGIST
  PATIENT
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED_BY_PATIENT
  CANCELLED_BY_PROFESSIONAL
}
