generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                    @id @default(autoincrement())
  email                String                 @unique
  name                 String
  password             String
  role                 Role
  refreshToken         String?                // Adicionar este campo
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  master               Master?
  clinic               Clinic?
  psychologist         Psychologist?
  patient              Patient?
  Holiday              Holiday[]
  notificationSettings NotificationSettings?
  phone                String?
  tenantId             String
}

model NotificationSettings {
  id                  Int     @id @default(autoincrement())
  user                User    @relation(fields: [userId], references: [id])
  userId              Int     @unique
  emailNotifications  Boolean @default(true)
  smsNotifications    Boolean @default(false)
  pushNotifications   Boolean @default(false)
  reminderTimeMinutes Int     @default(1440) // 24 hours in minutes
}

model Master {
  id     Int  @id @default(autoincrement())
  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
  tenantId    String
  
}

model Clinic {
  id            Int            @id @default(autoincrement())
  user          User           @relation(fields: [userId], references: [id])
  userId        Int            @unique
  name          String
  cnpj          String?
  address       String
  phone         String
  tenantId      String
  psychologists Psychologist[]
  patients      Patient[]
  asaasId       String?       // ID do cliente no Asaas
  expenses      Expense[]
  bankAccount   BankAccount?
}

model Psychologist {
  id            Int             @id @default(autoincrement())
  user          User            @relation(fields: [userId], references: [id])
  userId        Int             @unique
  cpf           String          @unique
  crp           String          @unique
  address       String
  phone         String
  clinic        Clinic?         @relation(fields: [clinicId], references: [id])
  clinicId      Int?
  tenantId      String
  patients      Patient[]
  appointments  Appointment[]
  AvailableSlot AvailableSlot[]
  asaasId       String?         // ID do cliente no Asaas
  bankAccount   BankAccount?
  splitConfig   SplitConfig?    // Configuração de divisão de pagamentos
}

model Patient {
  id             Int           @id @default(autoincrement())
  user           User          @relation(fields: [userId], references: [id])
  userId         Int           @unique
  cpf            String        @unique
  address        String
  phone          String
  psychologist   Psychologist? @relation(fields: [psychologistId], references: [id])
  psychologistId Int?
  clinic         Clinic?       @relation(fields: [clinicId], references: [id])
  clinicId       Int?
  tenantId       String
  appointments   Appointment[]
  moodDiaries    MoodDiary[]
  asaasId        String?       // ID do cliente no Asaas
}

model Appointment {
  id                Int               @id @default(autoincrement())
  patient           Patient           @relation(fields: [patientId], references: [id])
  patientId         Int
  psychologist      Psychologist      @relation(fields: [psychologistId], references: [id])
  psychologistId    Int
  dateTime         DateTime
  duration         Int
  status           AppointmentStatus
  notes            String?
  value            Decimal           @db.Decimal(10,2)
  tenantId         String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  payment          Payment?
  healthInsurance  HealthInsurance?  @relation(fields: [healthInsuranceId], references: [id])
  healthInsuranceId Int?
}

model Payment {
  id                Int             @id @default(autoincrement())
  appointment       Appointment     @relation(fields: [appointmentId], references: [id])
  appointmentId     Int             @unique
  amount           Decimal         @db.Decimal(10,2)
  method           PaymentMethod
  status           PaymentStatus
  discount         Decimal?        @db.Decimal(10,2)
  installments     Int?
  asaasPaymentId   String?         // ID do pagamento no Asaas
  asaasInvoiceUrl  String?         // URL da fatura no Asaas
  asaasPixCode     String?         // Código PIX gerado pelo Asaas
  asaasBoletoCode  String?         // Código de barras do boleto
  dueDate         DateTime
  paidAt          DateTime?
  notes           String?
  tenantId        String
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model SplitConfig {
  id              Int           @id @default(autoincrement())
  psychologist    Psychologist  @relation(fields: [psychologistId], references: [id])
  psychologistId  Int           @unique
  clinicPercentage Decimal      @db.Decimal(5,2)  // Percentual que vai para a clínica
  enabled         Boolean       @default(true)
  tenantId        String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model BankAccount {
  id            Int           @id @default(autoincrement())
  bank          String
  accountType   BankAccountType
  agency        String
  accountNumber String
  digit        String
  ownerName    String
  ownerCpfCnpj String
  clinic       Clinic?       @relation(fields: [clinicId], references: [id])
  clinicId     Int?         @unique
  psychologist Psychologist? @relation(fields: [psychologistId], references: [id])
  psychologistId Int?        @unique
  asaasId      String?      // ID da conta bancária no Asaas
  tenantId     String
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

model Expense {
  id          Int             @id @default(autoincrement())
  clinic      Clinic          @relation(fields: [clinicId], references: [id])
  clinicId    Int
  category    ExpenseCategory
  description String
  amount      Decimal         @db.Decimal(10,2)
  dueDate     DateTime
  paidAt      DateTime?
  recurring   Boolean         @default(false)
  frequency   ExpenseFrequency?
  status      ExpenseStatus
  notes       String?
  tenantId    String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model HealthInsurance {
  id           Int           @id @default(autoincrement())
  name         String
  coverage     Decimal       @db.Decimal(10,2)  // Percentual de cobertura
  active       Boolean       @default(true)
  appointments Appointment[]
  tenantId     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Holiday {
  id          Int      @id @default(autoincrement())
  date        DateTime
  description String
  isNational  Boolean
  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById Int
  tenantId    String
}

model AvailableSlot {
  id             Int          @id @default(autoincrement())
  psychologist   Psychologist @relation(fields: [psychologistId], references: [id])
  psychologistId Int
  startTime      DateTime
  endTime        DateTime
  isAvailable    Boolean 
  tenantId       String
}

model MoodDiary {
  id        Int      @id @default(autoincrement())
  patient   Patient  @relation(fields: [patientId], references: [id])
  patientId Int
  date      DateTime
  mood      Int
  notes     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tenantId  String
}

enum Role {
  MASTER
  CLINIC
  PSYCHOLOGIST
  PATIENT
}

enum AppointmentStatus {
  SCHEDULED
  COMPLETED
  CANCELLED_BY_PATIENT
  CANCELLED_BY_PROFESSIONAL
}

enum PaymentMethod {
  BOLETO
  CREDIT_CARD
  DEBIT_CARD
  PIX
  HEALTH_INSURANCE
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
  REFUNDED
  CONFIRMED    // Para pagamentos via PIX
  RECEIVED     // Para pagamentos já recebidos na conta
}

enum BankAccountType {
  CHECKING
  SAVINGS
}

enum ExpenseCategory {
  RENT
  UTILITIES
  PAYROLL
  SUPPLIES
  MARKETING
  SOFTWARE
  MAINTENANCE
  TAXES
  OTHER
}

enum ExpenseFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
  ONCE
}

enum ExpenseStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
} 